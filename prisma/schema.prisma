generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Size {
  id        String   @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation("StoreToColor", fields: [storeId], references: [id])

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Decimal
  categoryId  String
  createdAt   DateTime    @default(now())
  isArchived  Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  updatedAt   DateTime    @updatedAt
  storeId     String
  description String
  category    Category    @relation(fields: [categoryId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  variants    Variant[]

  @@index([categoryId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[]

  @@index([storeId])
  @@index([billboardId])
}

model Variant {
  id         String      @id @default(uuid())
  productId  String
  inStock    Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  size       String
  color      String
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([productId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  isPaid     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  address    String      @default("")
  phone      String      @default("")
  updatedAt  DateTime    @updatedAt
  isSent     Boolean     @default(false)
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(uuid())
  productId String
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int      @default(1)
  variantId String
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant  @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}
